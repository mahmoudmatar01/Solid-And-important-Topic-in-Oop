                                                           " Open and Closed principle "

1- thw open / closed principle states that software entities.

2- Classes , Modules , Function ,etc Should be open for extension ,but closed for modification .

3-Any functionality should be done by adding new classes instead of changing existing one 


                                                            " How To implement OCP "

1- one may achieve this by adding  new functionality to derived class
2- or allow client to access the original class with Abstract or InterFace Class
     and Create Anew class inheritance from Abstract Class or interface class
     and add  a new functionality into this new class 




                                                   "  The code that donot support The OCP "


class AreaCalculator
{
    protected $shapes;

    public function __construct($shapes = [])
    {
        $this->shapes = $shapes;
    }

    public function sum()
    {
        foreach ($this->shapes as $shape) {
            if (is_a($shape, 'Square')) {
                $area[] = pow($shape->length, 2);
            } elseif (is_a($shape, 'Circle')) {
                $area[] = pi() * pow($shape->radius, 2);
            }
        }

        return array_sum($area);
    }
}


class Square
{
    public $length;

    public function __construct($length)
    {
        $this->length = $length;
    }

    public function area()
    {
        return pow($this->length, 2);
    }
}


class Circle
{
    public $radius;

    public function construct($radius)
    {
        $this->radius = $radius;
    }

    public function area()
    {
        return pi() * pow($shape->radius, 2);
    }
}




                                                            "   the code After support OCP "


class AreaCalculator
{
    // ...

    public function sum()
    {
        foreach ($this->shapes as $shape) {
            $area[] = $shape->area();
        }

        return array_sum($area);
    }
}



interface ShapeInterface
{
    public function area();
}


class Square implements ShapeInterface
{
    // ...
}


class Circle implements ShapeInterface
{
    // ...
}

class AreaCalculator
{
    // ...

    public function sum()
    {
        foreach ($this->shapes as $shape) {
            if (is_a($shape, 'ShapeInterface')) {
                $area[] = $shape->area();
                continue;
            }

            throw new AreaCalculatorInvalidShapeException();
        }

        return array_sum($area);
    }
}